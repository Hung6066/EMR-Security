import { Component, OnInit, ViewChild } from '@angular/core';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Chart, ChartData, ChartOptions } from 'chart.js';
import { VulnerabilityService, Vulnerability } from '../../../services/vulnerability.service'; // Tạo service này

@Component({
  selector: 'app-vulnerability',
  templateUrl: './vulnerability.component.html',
  styleUrls: ['./vulnerability.component.css']
})
export class VulnerabilityComponent implements OnInit {
  vulnerabilities: Vulnerability[] = [];
  displayedColumns = ['severity', 'cveId', 'packageName', 'vulnerableVersion', 'status', 'scanner', 'actions'];
  loading = true;

  chart: Chart | undefined;
  chartData: ChartData<'doughnut'> = {
    labels: [],
    datasets: [{ data: [] }]
  };
  chartOptions: ChartOptions<'doughnut'> = { responsive: true };

  @ViewChild('fileInput') fileInput: any;

  constructor(
    private vulnService: VulnerabilityService,
    private snackBar: MatSnackBar
  ) {}

  ngOnInit(): void {
    this.loadVulnerabilities();
  }

  loadVulnerabilities(): void {
    this.loading = true;
    this.vulnService.getVulnerabilities().subscribe(data => {
      this.vulnerabilities = data;
      this.updateChart(data);
      this.loading = false;
    });
  }

  onFileSelected(event: Event, scanner: string): void {
    const file = (event.target as HTMLInputElement).files?.[0];
    if (file) {
      this.vulnService.importScan(scanner, file).subscribe(() => {
        this.snackBar.open(`Đã import kết quả quét của ${scanner}.`, 'OK', { duration: 3000 });
        this.loadVulnerabilities();
        this.fileInput.nativeElement.value = '';
      }, () => {
        this.snackBar.open(`Lỗi khi import file.`, 'OK', { duration: 3000 });
      });
    }
  }

  updateStatus(vuln: Vulnerability, status: string): void {
    this.vulnService.updateStatus(vuln.id, status).subscribe(() => {
      this.snackBar.open(`Đã cập nhật trạng thái cho ${vuln.cveId}.`, 'OK', { duration: 3000 });
      this.loadVulnerabilities();
    });
  }

  getSeverityColor(severity: string): string {
    switch (severity?.toLowerCase()) {
      case 'critical': return 'warn';
      case 'high': return 'accent';
      case 'medium': return 'primary';
      default: return '';
    }
  }

  updateChart(data: Vulnerability[]): void {
    const severityCounts: { [key: string]: number } = {
      'Critical': 0, 'High': 0, 'Medium': 0, 'Low': 0, 'Unknown': 0
    };
    data.forEach(v => {
      severityCounts[v.severity] = (severityCounts[v.severity] || 0) + 1;
    });

    this.chartData.labels = Object.keys(severityCounts);
    this.chartData.datasets[0].data = Object.values(severityCounts);
    this.chartData.datasets[0].backgroundColor = [
      '#f44336', // Critical
      '#ff9800', // High
      '#2196f3', // Medium
      '#4caf50', // Low
      '#9e9e9e'  // Unknown
    ];
  }
}